#ifndef VISUAL_CODEBOOK_H
#define VISUAL_CODEBOOK_H

#include <iostream>
#include <vector>
#include <fstream>
#include <string>

#include <pcl/common/common.h>
#include <cv.h>
#include <boost/filesystem.hpp>

template<typename FeatureT>
class VisualCodebook{
private:
    cv::Mat desc_cluster_centers_;
    cv::Mat samples_;
    size_t num_clusters_;

public:
    VisualCodebook()
    {
        num_clusters_ = 100;
    }

    void computeHist(const std::vector<std::vector<std::vector< FeatureT > > >
                                          signatures_per_class_per_view_v, const cv::Mat labels,
                                           std::vector<std::vector<std::vector<double> > > & hist_per_class_per_view_v);
    void writeHistsToFile(const std::string base_dir, const std::vector<std::vector<std::vector<double> > > & hist_per_class_per_view_v);
    void computeCodebook(const std::vector<std::vector<std::vector<FeatureT> > >
                         signatures_per_class_per_view_v, const size_t num_signatures, cv::Mat &labels);
    void computeLabels(const std::vector<std::vector<std::vector<FeatureT> > >
                                          signatures_per_class_per_view_v, const size_t num_signatures, cv::Mat &labels);

    void writeCodebookToFile(const std::string base_dir);
    void readCodebookFromFile(const std::string base_dir);
    void getDescClusterCenters(cv::Mat &desc_cluster_centers)
    {
        desc_cluster_centers =  desc_cluster_centers_;
    }

    size_t getNumClusters()
    {
        return num_clusters_;
    }

    void setNumClusters(size_t num_clusters)
    {
        num_clusters_ = num_clusters;
    }
};

#endif //VISUAL_CODEBOOK_H
