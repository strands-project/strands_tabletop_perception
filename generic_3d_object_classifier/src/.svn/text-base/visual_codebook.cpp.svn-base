#include "visual_codebook.h"

template <class T>
void VisualCodebook<T>::readCodebookFromFile(const std::string base_dir)
{
    std::stringstream filename;
    filename << base_dir << "codebook.yml";
    cv::FileStorage codebookFile(filename.str(), cv::FileStorage::READ);
    codebookFile["DescriptorClusterCenters"] >> desc_cluster_centers_;
    codebookFile.release();
}

template <class T>
void VisualCodebook<T>::writeCodebookToFile(const std::string base_dir)
{
    boost::filesystem::path dir(base_dir);

    if(!(boost::filesystem::exists(dir)))
    {
         std::cout << base_dir << " does not exist..." << std::endl;

         if (boost::filesystem::create_directory(dir))
             std::cout << base_dir << " successfully created !" << std::endl;
     }

    std::stringstream filename;
    filename << base_dir << "codebook.yml";

    cv::FileStorage codebookFile(filename.str(), cv::FileStorage::WRITE);
    codebookFile << "DescriptorClusterCenters" << desc_cluster_centers_;
    codebookFile.release();
}


template <class T>
void VisualCodebook<T>::writeHistsToFile(const std::string base_dir, const std::vector<std::vector<std::vector<double> > > & hist_per_class_per_view_v)
{
    boost::filesystem::path dir(base_dir);

    if(!(boost::filesystem::exists(dir)))
    {
         std::cout << base_dir << " does not exist..." << std::endl;

         if (boost::filesystem::create_directory(dir))
             std::cout << base_dir << " successfully created !" << std::endl;
     }

    for(size_t class_id=0; class_id < hist_per_class_per_view_v.size(); class_id++)
    {
        std::ofstream myfile;
        std::stringstream filename;
        filename << base_dir << "hist_class_" << class_id << ".txt";
        myfile.open(filename.str().c_str());

        if(!myfile)
        {
            std::cerr << "Could not write to " << filename.str() << std::endl;
        }
        else
        {
            for(size_t view_id=0; view_id < hist_per_class_per_view_v[class_id].size(); view_id++)
            {
                size_t num_clusters = hist_per_class_per_view_v[class_id][view_id].size();
                for(size_t hist_bin_id=0; hist_bin_id < num_clusters; hist_bin_id++)
                {
                    myfile << hist_per_class_per_view_v[class_id][view_id][hist_bin_id] << " " ;
                }
                myfile << "\n";
            }
           myfile.close();
        }
     }
}

template <class T>
void VisualCodebook<T>::computeHist(const std::vector<std::vector<std::vector<T> > >
                                      signatures_per_class_per_view_v, const cv::Mat labels, std::vector<std::vector<std::vector<double> > > & hist_per_class_per_view_v)
{
    int num_classes = signatures_per_class_per_view_v.size();

    hist_per_class_per_view_v.resize(num_classes);
    size_t row_id=0;
    for(size_t class_id=0; class_id < num_classes; class_id++)
    {
        int num_views_in_class = signatures_per_class_per_view_v[class_id].size();
        hist_per_class_per_view_v[class_id].resize(num_views_in_class);

        for (size_t  view_id=0; view_id < num_views_in_class; view_id++)
        {
            hist_per_class_per_view_v[class_id][view_id].resize(num_clusters_);
            for(size_t hist_bin_id=0; hist_bin_id < num_clusters_; hist_bin_id++)
            {
                hist_per_class_per_view_v[class_id][view_id][hist_bin_id]=0;
            }

            for (size_t signature_id=0; signature_id < signatures_per_class_per_view_v[class_id][view_id].size(); signature_id++)
            {
                int hist_bin_id = labels.at<int>(row_id, 0);
                hist_per_class_per_view_v[class_id][view_id][hist_bin_id] += 1;
                row_id++;
            }

            for(size_t hist_bin_id=0; hist_bin_id < num_clusters_; hist_bin_id++)
            {   //normalize such that sum(hist)=1
                hist_per_class_per_view_v[class_id][view_id][hist_bin_id] /= signatures_per_class_per_view_v[class_id][view_id].size();
            }
       }
    }
}

template <class T>
void VisualCodebook<T>::computeCodebook(const std::vector<std::vector<std::vector<T> > >
                                        signatures_per_class_per_view_v, const size_t num_signatures, cv::Mat &labels)
{
    samples_ = cv::Mat(num_signatures, 128, CV_32FC1);
    size_t row_id=0;

    for(size_t class_id=0; class_id < signatures_per_class_per_view_v.size(); class_id++)
    {
        for (size_t  view_id=0; view_id < signatures_per_class_per_view_v[class_id].size(); view_id++)
        {
            for (size_t signature_id=0; signature_id < signatures_per_class_per_view_v[class_id][view_id].size(); signature_id++)
            {
                for(size_t jjj=0; jjj < 128; jjj++)
                {
                    samples_.at<float>(row_id,jjj) =
                            static_cast<float>(signatures_per_class_per_view_v[class_id][view_id][signature_id].histogram[jjj]);
                }
            row_id++;
            }
       }
    }
    desc_cluster_centers_ = cv::Mat(num_clusters_, 128, CV_32FC1);
    cv::kmeans(samples_, num_clusters_, labels, cv::TermCriteria(CV_TERMCRIT_EPS+CV_TERMCRIT_ITER, 50, 1.0), 1, cv::KMEANS_RANDOM_CENTERS, desc_cluster_centers_);
    desc_cluster_centers_.convertTo(desc_cluster_centers_, CV_64FC1);
}

template <class T>
void VisualCodebook<T>::computeLabels(const std::vector<std::vector<std::vector<T> > >
                                      signatures_per_class_per_view_v, const size_t num_signatures, cv::Mat &labels)
{
    labels = cv::Mat(num_signatures, 1, CV_32S);
    size_t num_classes = signatures_per_class_per_view_v.size();
    //size_t num_clusters = desc_cluster_centers_.rows;

    //hist_per_class_per_view_v.resize(num_classes);
    size_t row_id=0;
    for(size_t class_id=0; class_id < num_classes; class_id++)
    {
        int num_views_in_class = signatures_per_class_per_view_v[class_id].size();
        //hist_per_class_per_view_v[class_id].resize(num_views_in_class);

        for (size_t  view_id=0; view_id < num_views_in_class; view_id++)
        {
            //hist_per_class_per_view_v[class_id][view_id].resize(num_clusters);
            int signatures_per_view = signatures_per_class_per_view_v[class_id][view_id].size();

            for(size_t signature_id=0; signature_id < signatures_per_view; signature_id++)
            {
                cv::Mat signature(1, 128, CV_64FC1);
                for(size_t feature_attribute_id=0; feature_attribute_id<128; feature_attribute_id++)
                {
                    signature.at<double>(0,feature_attribute_id) = signatures_per_class_per_view_v[class_id][view_id][signature_id].histogram[feature_attribute_id];
                }

                double shortest_dist = DBL_MAX;
                for(size_t kk=0; kk < desc_cluster_centers_.rows; kk++)
                {
                    double dist = cv::norm(desc_cluster_centers_.row(kk), signature.row(0), cv::NORM_L2);
                    if(dist<shortest_dist)
                    {
                        shortest_dist = dist;
                        labels.at<int>(row_id,0) = kk;
                    }
                }
                row_id++;
            }

       }
    }
}

template class VisualCodebook<pcl::Histogram<128> >;
